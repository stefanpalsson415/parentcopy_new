import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { X, ArrowRight, ArrowLeft, CheckCircle, HelpCircle, Star } from 'lucide-react';
import { useAuth } from '../../contexts/AuthContext';
import { useFamily } from '../../contexts/FamilyContext';

const OnboardingTutorial = ({ onClose }) => {
  const navigate = useNavigate();
  const { currentUser } = useAuth();
  const { 
    familyName, 
    selectedUser, 
    currentWeek,
    familyMembers
  } = useFamily();
  
  const [currentStep, setCurrentStep] = useState(0);
  const [seenTutorial, setSeenTutorial] = useState(false);
  const [activeScreen, setActiveScreen] = useState('dashboard');
  
  // Check if user has seen tutorial before
  useEffect(() => {
    const tutorialSeen = localStorage.getItem('allieTutorialSeen');
    if (tutorialSeen) {
      setSeenTutorial(true);
    }
  }, []);
  
  // Mark tutorial as seen when completed
  const completeTutorial = () => {
    localStorage.setItem('allieTutorialSeen', 'true');
    onClose();
  };
  
  // Reset tutorial progress
  const resetTutorial = () => {
    localStorage.removeItem('allieTutorialSeen');
    setCurrentStep(0);
    setSeenTutorial(false);
  };

  // Define tutorial steps
  const tutorialSteps = [
    // Welcome
    {
      title: "Welcome to Allie",
      content: `Allie helps your family balance responsibilities more fairly. Our app uses data, AI insights, and structured processes to create better workload distribution.`,
      screen: "dashboard",
      position: "center",
      highlight: null
    },
    // Initial Survey
    {
      title: "Start with the Initial Survey",
      content: "First, all family members complete the initial survey. This gives us a baseline of how tasks are currently distributed.",
      screen: "survey",
      position: "right",
      highlight: ".survey-section"
    },
    // Dashboard Overview
    {
      title: "Your Family Dashboard",
      content: "After the survey, you'll see your Family Dashboard. This shows the current balance of tasks and highlights areas that need attention.",
      screen: "dashboard",
      position: "bottom",
      highlight: ".dashboard-chart"
    },
    // Weekly Tasks
    {
      title: "Weekly Tasks",
      content: "Each week, our AI suggests personalized tasks for both parents. Complete these to gradually improve your family's balance.",
      screen: "tasks",
      position: "left",
      highlight: ".task-list"
    },
    // Weekly Check-in
    {
      title: "Weekly Check-ins",
      content: "Short weekly surveys help track your progress. These take just a few minutes but provide valuable data on your improvements.",
      screen: "check-in",
      position: "top",
      highlight: ".weekly-check-in"
    },
    // Family Meetings
    {
      title: "Family Meetings",
      content: "Your weekly family meeting agenda is automatically generated based on your data, making discussions productive and focused.",
      screen: "meeting",
      position: "right",
      highlight: ".family-meeting"
    },
    // AI Assistant
    {
      title: "Ask Allie AI",
      content: "Have questions? The Allie AI Assistant can analyze your family data and provide personalized advice and insights.",
      screen: "chat",
      position: "bottom",
      highlight: ".chat-widget"
    },
    // Relationship Tab
    {
      title: "Strengthen Your Relationship",
      content: "The Relationship tab helps couples track how workload balance affects their relationship and provides strategies to improve connection.",
      screen: "relationship",
      position: "top",
      highlight: ".relationship-tab"
    },
    // Navigation
    {
      title: "Easy Navigation",
      content: "Use the tabs to switch between tasks, dashboard, relationship insights, and historical data from previous weeks.",
      screen: "dashboard",
      position: "top",
      highlight: ".tab-navigation"
    },
    // Completion
    {
      title: "You're Ready!",
      content: "That's it! You now know how to use Allie to create better balance in your family. You can revisit this tutorial anytime from Settings.",
      screen: "dashboard",
      position: "center",
      highlight: null
    }
  ];

  // Navigate to appropriate screen based on current tutorial step
  useEffect(() => {
    const step = tutorialSteps[currentStep];
    if (step && step.screen !== activeScreen) {
      setActiveScreen(step.screen);
      // In a real implementation, you would navigate to the appropriate screen
      // navigate(`/${step.screen}`);
    }
  }, [currentStep, activeScreen]);

  // Helper function to navigate through tutorial steps
  const navigateStep = (direction) => {
    if (direction === 'next') {
      if (currentStep < tutorialSteps.length - 1) {
        setCurrentStep(currentStep + 1);
      } else {
        completeTutorial();
      }
    } else if (direction === 'prev' && currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  // Get current step data
  const currentStepData = tutorialSteps[currentStep];

  // Render the tutorial overlay
  return (
    <div className="fixed inset-0 bg-black bg-opacity-40 z-50 flex items-center justify-center font-roboto">
      <div className="absolute inset-0 pointer-events-none">
        {/* Highlight effect would go here based on currentStepData.highlight */}
      </div>
      
      <div className="bg-white rounded-xl shadow-2xl max-w-md w-full mx-4 overflow-hidden relative">
        {/* Progress indicator */}
        <div className="w-full bg-gray-200 h-1">
          <div 
            className="bg-black h-full transition-all" 
            style={{width: `${((currentStep + 1) / tutorialSteps.length) * 100}%`}}
          />
        </div>
        
        {/* Close button */}
        <button 
          onClick={onClose} 
          className="absolute top-4 right-4 text-gray-500 hover:text-gray-700"
        >
          <X size={20} />
        </button>
        
        {/* Content */}
        <div className="p-6">
          <div className="mb-2 flex items-center">
            <span className="bg-black text-white text-xs rounded-full w-6 h-6 inline-flex items-center justify-center mr-2">
              {currentStep + 1}
            </span>
            <h3 className="text-xl font-bold">{currentStepData.title}</h3>
          </div>
          
          <p className="text-gray-600 mb-8">
            {currentStepData.content}
          </p>
          
          {/* Mockup visual for the current screen being explained */}
          <div className="mb-8 bg-gray-100 rounded-lg p-4 h-48 flex items-center justify-center">
            {activeScreen === 'dashboard' && (
              <div className="text-center">
                <BarChartIcon size={40} className="mx-auto mb-2 text-gray-400" />
                <p className="text-sm text-gray-500">Family Dashboard Preview</p>
              </div>
            )}
            {activeScreen === 'survey' && (
              <div className="text-center">
                <ClipboardIcon size={40} className="mx-auto mb-2 text-gray-400" />
                <p className="text-sm text-gray-500">Survey Interface Preview</p>
              </div>
            )}
            {activeScreen === 'tasks' && (
              <div className="text-center">
                <ChecklistIcon size={40} className="mx-auto mb-2 text-gray-400" />
                <p className="text-sm text-gray-500">Tasks View Preview</p>
              </div>
            )}
            {activeScreen === 'relationship' && (
              <div className="text-center">
                <HeartIcon size={40} className="mx-auto mb-2 text-gray-400" />
                <p className="text-sm text-gray-500">Relationship View Preview</p>
              </div>
            )}
            {/* Add more screen previews as needed */}
          </div>
          
          {/* Navigation buttons */}
          <div className="flex justify-between">
            <button
              onClick={() => navigateStep('prev')}
              disabled={currentStep === 0}
              className={`px-4 py-2 rounded flex items-center ${
                currentStep === 0 
                  ? 'text-gray-400 cursor-not-allowed' 
                  : 'text-black hover:bg-gray-100'
              }`}
            >
              <ArrowLeft size={16} className="mr-1" />
              Previous
            </button>
            
            <button
              onClick={() => navigateStep('next')}
              className="px-4 py-2 bg-black text-white rounded hover:bg-gray-800 flex items-center"
            >
              {currentStep < tutorialSteps.length - 1 ? (
                <>
                  Next
                  <ArrowRight size={16} className="ml-1" />
                </>
              ) : (
                <>
                  Finish
                  <CheckCircle size={16} className="ml-1" />
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Icon components for the mockups
const BarChartIcon = ({ size, className }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <line x1="18" y1="20" x2="18" y2="10"></line>
    <line x1="12" y1="20" x2="12" y2="4"></line>
    <line x1="6" y1="20" x2="6" y2="14"></line>
    <line x1="3" y1="20" x2="21" y2="20"></line>
  </svg>
);

const ClipboardIcon = ({ size, className }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path>
    <rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect>
    <line x1="12" y1="11" x2="16" y2="11"></line>
    <line x1="12" y1="16" x2="16" y2="16"></line>
    <line x1="8" y1="11" x2="9" y2="11"></line>
    <line x1="8" y1="16" x2="9" y2="16"></line>
  </svg>
);

const ChecklistIcon = ({ size, className }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <line x1="10" y1="6" x2="21" y2="6"></line>
    <line x1="10" y1="12" x2="21" y2="12"></line>
    <line x1="10" y1="18" x2="21" y2="18"></line>
    <polyline points="3 6 4 7 6 5"></polyline>
    <polyline points="3 12 4 13 6 11"></polyline>
    <polyline points="3 18 4 19 6 17"></polyline>
  </svg>
);

const HeartIcon = ({ size, className }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
  </svg>
);

export default OnboardingTutorial;